import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSocket } from '../../contexts/SocketContext';
import './MainMenu.css';

interface UserProfile {
  id: string;
  username: string;
  email: string;
  rating: number;
  gamesPlayed: number;
  gamesWon: number;
  winRate: number;
  createdAt: string;
}

interface LeaderboardEntry {
  rank: number;
  username: string;
  rating: number;
  gamesPlayed: number;
  gamesWon: number;
  winRate: number;
}

interface Room {
  _id: string;
  code: string;
  mode: string;
  host: string;
  players: string[];
  status: string;
  maxPlayers: number;
}

const MainMenu: React.FC = () => {
  const navigate = useNavigate();
  const { socket, connectSocket } = useSocket();
  const [activeTab, setActiveTab] = useState<'profile' | 'ranked' | 'custom' | 'leaderboard'>('profile');
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [currentRoom, setCurrentRoom] = useState<Room | null>(null);
  const [roomCode, setRoomCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  
  // Îû≠ÌÅ¨ Îß§Ïπ≠ Í¥ÄÎ†® ÏÉÅÌÉú
  const [isMatchmaking, setIsMatchmaking] = useState(false);
  const [matchmakingStatus, setMatchmakingStatus] = useState<'searching' | 'found' | 'starting'>('searching');
  const [matchmakingType, setMatchmakingType] = useState<'ranked' | 'custom' | null>(null);
  const [notification, setNotification] = useState<{type: 'success' | 'info' | 'error', message: string} | null>(null);
  
  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:4000';

  const fetchUserProfile = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${apiUrl}/api/profile`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const profile = await response.json();
        setUserProfile(profile);
      }
    } catch (error) {
      console.error('ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå®:', error);
    }
  }, [apiUrl]);

  const fetchLeaderboard = useCallback(async () => {
    try {
      const response = await fetch(`${apiUrl}/api/leaderboard`);
      if (response.ok) {
        const data = await response.json();
        setLeaderboard(data);
      }
    } catch (error) {
      console.error('Îû≠ÌÇπ Ï°∞Ìöå Ïã§Ìå®:', error);
    }
  }, [apiUrl]);

  const fetchCurrentRoom = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${apiUrl}/api/room/my`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        setCurrentRoom(data.room);
      }
    } catch (error) {
      console.error('Î∞© Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', error);
    }
  }, [apiUrl]);


  useEffect(() => {
    fetchUserProfile();
    fetchLeaderboard();
    fetchCurrentRoom();
  }, [fetchUserProfile, fetchLeaderboard, fetchCurrentRoom]);

  // ÏÜåÏºì Ïó∞Í≤∞Í≥º Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎ•º Î≥ÑÎèÑ useEffectÎ°ú Î∂ÑÎ¶¨
  useEffect(() => {
    // ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ ÏÜåÏºì Ïó∞Í≤∞
    const token = localStorage.getItem('token');
    if (token && !socket) {
      connectSocket();
    }
  }, [socket, connectSocket]);

  // ÏÜåÏºì Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ïÏùÑ Î≥ÑÎèÑ useEffectÎ°ú Î∂ÑÎ¶¨
  useEffect(() => {
    if (!socket) return;

    console.log('Î©îÏù∏Î©îÎâ¥ÏóêÏÑú ÏÜåÏºì Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï');

      // ÏÜåÏºì Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
      const handleNotification = (data: {type: 'success' | 'info' | 'error', message: string, duration?: number}) => {
        console.log('ÏïåÎ¶º Î∞õÏùå:', data);
        setNotification(data);
        setTimeout(() => setNotification(null), data.duration || 3000);
      };

      const handleQueueJoined = (data: {mode: string, queueSize: number}) => {
        console.log('‚úÖ ÌÅê Ï∞∏Í∞Ä ÏÑ±Í≥µ:', data);
        setIsMatchmaking(true);
        setMatchmakingStatus('searching');
        setMatchmakingType(data.mode as 'ranked' | 'custom');
        setMessage(`Îß§Ïπ≠ ÎåÄÍ∏∞ Ï§ë... (${data.queueSize}Î™Ö ÎåÄÍ∏∞Ï§ë)`);
      };

      const handleQueueLeft = (data?: { success: boolean; message: string }) => {
        console.log('‚ùå ÌÅê Îñ†ÎÇ®', data);
        setIsMatchmaking(false);
        setMatchmakingType(null);
        setMatchmakingStatus('searching');
        setMessage('');
        
        // ÏÑúÎ≤ÑÏóêÏÑú Î©îÏãúÏßÄÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú
        if (data?.message) {
          setNotification({
            type: 'info',
            message: data.message
          });
          setTimeout(() => setNotification(null), 3000);
        }
      };

      const handleMatchFound = (data: { opponent: string }) => {
        console.log(`‚úÖ Îß§Ïπò Î∞úÍ≤¨! ÏÉÅÎåÄ: ${data.opponent}`);
        setMatchmakingStatus('found');
        setMessage(`ÏÉÅÎåÄÎ•º Ï∞æÏïòÏäµÎãàÎã§: ${data.opponent}. Í≥ß Í≤åÏûÑÏùÑ ÏãúÏûëÌï©ÎãàÎã§...`);
      };

      const handleGameStarted = (data: {playerId: string, roomId: string, gameState?: any, playerInfo?: any}) => {
        console.log('üéÆ Í≤åÏûÑ ÏãúÏûë Ïù¥Î≤§Ìä∏ Î∞õÏùå:', data);
        
        // Îß§Ïπ≠ ÏÉÅÌÉú Ï¶âÏãú Ìï¥Ï†ú
        setMatchmakingStatus('starting');
        
        // Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ Î°úÍπÖ
        console.log('üöÄ Í≤åÏûÑ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô ÏãúÎèÑ:', {
          playerId: data.playerId,
          roomId: data.roomId,
          hasGameState: !!data.gameState,
          hasPlayerInfo: !!data.playerInfo,
          userAgent: navigator.userAgent
        });
        
        try {
          // Í≤åÏûÑ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          navigate(`/game/${data.roomId}`, { 
            state: { 
              playerId: data.playerId, 
              roomId: data.roomId,
              gameState: data.gameState,
              playerInfo: data.playerInfo
            },
            replace: true  // replace ÏòµÏÖò Ï∂îÍ∞Ä
          });
          console.log('‚úÖ Í≤åÏûÑ ÌéòÏù¥ÏßÄ Ïù¥Îèô ÏôÑÎ£å');
        } catch (error) {
          console.error('‚ùå Í≤åÏûÑ ÌéòÏù¥ÏßÄ Ïù¥Îèô Ïã§Ìå®:', error);
        }
      };

      const handleGameState = (gameState: any) => {
        console.log('Í≤åÏûÑ ÏÉÅÌÉú Î∞õÏùå:', gameState);
        // Í≤åÏûÑÏù¥ ÏãúÏûëÎêòÎ©¥ Í≤åÏûÑ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        navigate('/game', { state: { gameState } });
      };

      const handleRatingUpdate = (ratingData: any) => {
        console.log('Î†àÏù¥ÌåÖ ÏóÖÎç∞Ïù¥Ìä∏:', ratingData);
        // Î†àÏù¥ÌåÖ ÏóÖÎç∞Ïù¥Ìä∏ Ïãú ÌîÑÎ°úÌïÑ Îã§Ïãú Î°úÎìú
        fetchUserProfile();
      };

      // Îß§Ïπ≠ Í¥ÄÎ†® Ï∂îÍ∞Ä Ïù¥Î≤§Ìä∏
      const handleWaiting = (message: string) => {
        console.log('ÎåÄÍ∏∞ Î©îÏãúÏßÄ:', message);
      };

      socket.on('notification', handleNotification);
      socket.on('queueJoined', handleQueueJoined);
      socket.on('queueLeft', handleQueueLeft);
      socket.on('matchFound', handleMatchFound); // ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
      socket.on('gameStarted', handleGameStarted);
      socket.on('gameState', handleGameState);
      socket.on('ratingUpdate', handleRatingUpdate);
      socket.on('waiting', handleWaiting);

      return () => {
        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨
        socket.off('notification', handleNotification);
        socket.off('queueJoined', handleQueueJoined);
        socket.off('queueLeft', handleQueueLeft);
        socket.off('matchFound', handleMatchFound); // Ï†ïÎ¶¨ Ï∂îÍ∞Ä
        socket.off('gameStarted', handleGameStarted);
        socket.off('gameState', handleGameState);
        socket.off('ratingUpdate', handleRatingUpdate);
        socket.off('waiting', handleWaiting);
      };
    }
  , [socket, navigate, fetchUserProfile]);

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  const createRoom = async () => {
    setLoading(true);
    setMessage('');
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${apiUrl}/api/room/create`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();

      if (response.ok) {
        setMessage(`Î∞©Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! Î∞© ÏΩîÎìú: ${data.code}`);
        await fetchCurrentRoom();
      } else {
        setMessage(data.error || 'Î∞© ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      setMessage('Î∞© ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const joinRoom = async () => {
    if (!roomCode.trim()) {
      setMessage('Î∞© ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setLoading(true);
    setMessage('');
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${apiUrl}/api/room/join`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ code: roomCode })
      });

      const data = await response.json();

      if (response.ok) {
        setMessage('Î∞©Ïóê Ï∞∏Ïó¨ÌñàÏäµÎãàÎã§!');
        setRoomCode('');
        await fetchCurrentRoom();
      } else {
        setMessage(data.error || 'Î∞© Ï∞∏Ïó¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      setMessage('Î∞© Ï∞∏Ïó¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const leaveRoom = async () => {
    setLoading(true);
    setMessage('');
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${apiUrl}/api/room/leave`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();

      if (response.ok) {
        setMessage(data.message);
        setCurrentRoom(null);
      } else {
        setMessage(data.error || 'Î∞© ÎÇòÍ∞ÄÍ∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      setMessage('Î∞© ÎÇòÍ∞ÄÍ∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const startMatchmaking = (mode: 'ranked' | 'custom') => {
    console.log(`${mode === 'ranked' ? 'Îû≠ÌÅ¨' : 'ÏùºÎ∞ò'} Îß§Ïπ≠ ÏãúÏûë ÏãúÎèÑ:`, { 
      socket: !!socket, 
      isMatchmaking, 
      socketConnected: socket?.connected 
    });
    if (socket && !isMatchmaking) {
      console.log(`join${mode === 'ranked' ? 'Ranked' : 'Custom'}Queue Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°`);
      socket.emit(`join${mode === 'ranked' ? 'Ranked' : 'Custom'}Queue`);
    } else {
      console.log('Îß§Ïπ≠ ÏãúÏûë Ïã§Ìå®:', { 
        noSocket: !socket, 
        alreadyMatchmaking: isMatchmaking 
      });
    }
  };

  const cancelMatchmaking = () => {
    console.log('Îß§Ïπ≠ Ï∑®ÏÜå ÏãúÎèÑ:', { isMatchmaking, matchmakingType });
    if (socket && isMatchmaking) {
      console.log('leaveQueue Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°');
      socket.emit('leaveQueue');
      
      // Ï¶âÏãú Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑúÎ≤Ñ ÏùëÎãµÏùÑ Í∏∞Îã§Î¶¨ÏßÄ ÏïäÏùå)
      setIsMatchmaking(false);
      setMatchmakingType(null);
      setMatchmakingStatus('searching');
      setMessage('');
      
      // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú
      setNotification({
        type: 'info',
        message: 'Îß§Ïπ≠Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.'
      });
      
      // 3Ï¥à ÌõÑ ÏïåÎ¶º Ï†úÍ±∞
      setTimeout(() => setNotification(null), 3000);
    } else {
      console.log('Îß§Ïπ≠ Ï∑®ÏÜå Ïã§Ìå®:', { 
        noSocket: !socket, 
        notMatchmaking: !isMatchmaking 
      });
    }
  };

  const enterGame = () => {
    if (currentRoom) {
      navigate('/game', { state: { roomId: currentRoom._id, roomCode: currentRoom.code } });
    }
  };

  return (
    <div className="main-menu">
      {/* ÏïåÎ¶º ÌåùÏóÖ */}
      {notification && (
        <div className={`notification notification-${notification.type}`}>
          {notification.message}
        </div>
      )}
      
      {/* Îß§Ïπ≠ ÏßÑÌñâ ÏÉÅÌÉú */}
      {isMatchmaking && (
        <div className="matchmaking-overlay" onClick={(e) => e.stopPropagation()}>
          <div className="matchmaking-popup">
            {matchmakingStatus === 'searching' && (
              <>
                <h3>üîç Îß§Ïπ≠ Ï§ë...</h3>
                <p>{matchmakingType === 'ranked' ? 'Îû≠ÌÅ¨ Í≤åÏûÑ' : 'ÏùºÎ∞ò Í≤åÏûÑ'} ÏÉÅÎåÄÎ∞©ÏùÑ Ï∞æÍ≥† ÏûàÏäµÎãàÎã§.</p>
                <div className="loading-spinner"></div>
              </>
            )}
            {matchmakingStatus === 'found' && (
              <>
                <h3>‚úÖ Îß§Ïπò ÏÑ±ÏÇ¨!</h3>
                <p>{message}</p>
                <div className="loading-spinner"></div>
              </>
            )}
            {matchmakingStatus === 'starting' && (
              <>
                <h3>üöÄ Í≤åÏûÑ ÏãúÏûë Ï§ë...</h3>
                <p>Í≤åÏûÑ ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.</p>
              </>
            )}
            <button 
              onClick={cancelMatchmaking} 
              className="cancel-btn"
              style={{touchAction: 'manipulation'}}
              disabled={matchmakingStatus !== 'searching'}
              title={matchmakingStatus !== 'searching' ? 'Ï∑®ÏÜåÌï† Ïàò ÏóÜÏäµÎãàÎã§' : 'Îß§Ïπ≠ÏùÑ Ï∑®ÏÜåÌï©ÎãàÎã§'}
            >
              {matchmakingStatus === 'searching' ? 'Îß§Ïπ≠ Ï∑®ÏÜå' : 'Ï∑®ÏÜå Î∂àÍ∞Ä'}
            </button>
          </div>
        </div>
      )}
      
      <header className="menu-header">
        <h1>üèÉ‚Äç‚ôÇÔ∏è Quoridor Online</h1>
        {userProfile && (
          <div className="user-info">
            <span>ÌôòÏòÅÌï©ÎãàÎã§, {userProfile.username}Îãò!</span>
            <button onClick={handleLogout} className="logout-btn">Î°úÍ∑∏ÏïÑÏõÉ</button>
          </div>
        )}
      </header>

      <nav className="menu-nav">
        <button 
          className={activeTab === 'profile' ? 'active' : ''}
          onClick={() => setActiveTab('profile')}
        >
          ÌîÑÎ°úÌïÑ
        </button>
        <button 
          className={activeTab === 'ranked' ? 'active' : ''}
          onClick={() => setActiveTab('ranked')}
        >
          ÎûúÎç§ Îß§Ïπ≠
        </button>
        <button 
          className={activeTab === 'custom' ? 'active' : ''}
          onClick={() => setActiveTab('custom')}
        >
          Ïª§Ïä§ÌÖÄ Í≤åÏûÑ
        </button>
        <button 
          className={activeTab === 'leaderboard' ? 'active' : ''}
          onClick={() => setActiveTab('leaderboard')}
        >
          Îû≠ÌÇπ
        </button>
      </nav>

      <main className="menu-content">
        {message && (
          <div className={`message ${message.includes('Ïã§Ìå®') || message.includes('ÏóÜÏäµÎãàÎã§') ? 'error' : 'success'}`}>
            {message}
          </div>
        )}

        {activeTab === 'profile' && userProfile && (
          <div className="profile-section">
            <h2>ÎÇ¥ ÌîÑÎ°úÌïÑ</h2>
            <div className="profile-card">
              <div className="profile-info">
                <h3>{userProfile.username}</h3>
                <p>Ïù¥Î©îÏùº: {userProfile.email}</p>
                <p>Í∞ÄÏûÖÏùº: {new Date(userProfile.createdAt).toLocaleDateString()}</p>
              </div>
              <div className="profile-stats">
                <div className="stat">
                  <label>Î†àÏù¥ÌåÖ</label>
                  <span className="rating">{userProfile.rating}</span>
                </div>
                <div className="stat">
                  <label>Í≤åÏûÑ Ïàò</label>
                  <span>{userProfile.gamesPlayed}</span>
                </div>
                <div className="stat">
                  <label>Ïäπ / Ìå®</label>
                  <div className="win-loss-container">
                    <span className="wins">{userProfile.gamesWon}</span>
                    <span className="separator">/</span>
                    <span className="losses">{userProfile.gamesPlayed - userProfile.gamesWon}</span>
                  </div>
                </div>
                <div className="stat">
                  <label>ÏäπÎ•†</label>
                  <span>{userProfile.winRate}%</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'ranked' && (
          <div className="ranked-section">
            <h2>ÔøΩ ÎûúÎç§ Îß§Ïπ≠</h2>
            {userProfile && (
              <div className="current-rank">
                <div className="rank-display">
                  <div className="rank-info">
                    <span className="rank-label">ÌòÑÏû¨ Îû≠ÌÅ¨</span>
                    <span className="rank-value">Î∏åÎ°†Ï¶à</span>
                  </div>
                  <div className="rating-info">
                    <span className="rating-label">Î†àÏù¥ÌåÖ</span>
                    <span className="rating-value">{userProfile.rating}</span>
                  </div>
                </div>
                <div className="rank-stats">
                  <div className="stat-item">
                    <span>Í≤åÏûÑ Ïàò</span>
                    <span>{userProfile.gamesPlayed}Í≤åÏûÑ</span>
                  </div>
                  <div className="stat-item">
                    <span>ÏäπÎ•†</span>
                    <span>{userProfile.winRate}%</span>
                  </div>
                </div>
              </div>
            )}
            
            <div className="match-container">
              <div className="match-option">
                <h3>ÔøΩ Îû≠ÌÅ¨ Îß§Ïπ≠</h3>
                <p>ÎπÑÏä∑Ìïú Ïã§Î†•Ïùò ÌîåÎ†àÏù¥Ïñ¥ÏôÄ Îß§Ïπ≠Îê©ÎãàÎã§.</p>
                <p>ÏäπÎ¶¨ Ïãú Î†àÏù¥ÌåÖ ÏÉÅÏäπ, Ìå®Î∞∞ Ïãú Î†àÏù¥ÌåÖ ÌïòÎùΩ</p>
                <button 
                  onClick={() => {
                    console.log('Îû≠ÌÅ¨ Îß§Ïπ≠ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                    startMatchmaking('ranked');
                  }}
                  disabled={loading || isMatchmaking}
                  className="match-btn ranked-match-btn"
                  style={{touchAction: 'manipulation'}}
                >
                  {isMatchmaking && matchmakingType === 'ranked' ? 'Îß§Ïπ≠ Ï§ë...' : 'Îû≠ÌÅ¨ Îß§Ïπ≠ ÏãúÏûë'}
                </button>
              </div>
              
              <div className="match-option">
                <h3>ü§ñ ÌÖåÏä§Ìä∏ Îß§Ïπ≠</h3>
                <p>Î¥áÍ≥º ÎåÄÏ†ÑÌïòÏó¨ Îß§Ïπ≠ ÏãúÏä§ÌÖúÏùÑ ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§.</p>
                <p style={{color: '#FF9800', fontSize: '0.9em'}}>Í∞úÎ∞ú/ÎîîÎ≤ÑÍπÖÏö© Í∏∞Îä•ÏûÖÎãàÎã§.</p>
                <div style={{display: 'flex', gap: '10px', flexDirection: 'column'}}>
                  <button 
                    onClick={() => {
                      console.log('ÌÖåÏä§Ìä∏ Î¥á Ï∂îÍ∞Ä Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                      if (socket) {
                        socket.emit('addTestBot');
                      }
                    }}
                    disabled={loading}
                    className="match-btn test-match-btn"
                    style={{touchAction: 'manipulation', background: '#FF9800', color: 'white'}}
                  >
                    ÌÖåÏä§Ìä∏ Î¥á Ï∂îÍ∞Ä
                  </button>
                  <button 
                    onClick={() => {
                      console.log('Î¥áÎÅºÎ¶¨ Í≤åÏûÑ ÏÉùÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                      if (socket) {
                        socket.emit('createBotGame');
                      }
                    }}
                    disabled={loading}
                    className="match-btn test-match-btn"
                    style={{touchAction: 'manipulation', background: '#9C27B0', color: 'white'}}
                  >
                    Î¥áÎÅºÎ¶¨ Í≤åÏûÑ ÌÖåÏä§Ìä∏
                  </button>
                </div>
              </div>
              
              <div className="match-option">
                <h3>üéÆ ÏùºÎ∞ò Îß§Ïπ≠</h3>
                <p>Îπ†Î•∏ ÎåÄÏ†ÑÏúºÎ°ú Ïó∞ÏäµÌïòÏÑ∏Ïöî.</p>
                <p>Î†àÏù¥ÌåÖÏóê ÏòÅÌñ•ÏùÑ Ï£ºÏßÄ ÏïäÏäµÎãàÎã§.</p>
                <button 
                  onClick={() => {
                    console.log('ÏùºÎ∞ò Îß§Ïπ≠ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                    startMatchmaking('custom');
                  }}
                  disabled={loading || isMatchmaking}
                  className="match-btn custom-match-btn"
                  style={{touchAction: 'manipulation'}}
                >
                  {isMatchmaking && matchmakingType === 'custom' ? 'Îß§Ïπ≠ Ï§ë...' : 'ÏùºÎ∞ò Îß§Ïπ≠ ÏãúÏûë'}
                </button>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'custom' && (
          <div className="custom-section">
            <h2>Ïª§Ïä§ÌÖÄ Í≤åÏûÑ</h2>
            
            {currentRoom ? (
              <div className="current-room">
                <h3>ÌòÑÏû¨ Ï∞∏Ïó¨ Ï§ëÏù∏ Î∞©</h3>
                <div className="room-info">
                  <p><strong>Î∞© ÏΩîÎìú:</strong> {currentRoom.code}</p>
                  <p><strong>ÌîåÎ†àÏù¥Ïñ¥:</strong> {currentRoom.players.length}/{currentRoom.maxPlayers}</p>
                  <p><strong>ÏÉÅÌÉú:</strong> {currentRoom.status === 'waiting' ? 'ÎåÄÍ∏∞ Ï§ë' : 'Í≤åÏûÑ Ï§ë'}</p>
                </div>
                <div className="room-actions">
                  <button onClick={enterGame} className="enter-game-btn">
                    Í≤åÏûÑ ÏûÖÏû•
                  </button>
                  <button onClick={leaveRoom} disabled={loading} className="leave-room-btn">
                    Î∞© ÎÇòÍ∞ÄÍ∏∞
                  </button>
                </div>
              </div>
            ) : (
              <>
                <div className="create-room">
                  <h3>Î∞© ÎßåÎì§Í∏∞</h3>
                  <p>ÏÉàÎ°úÏö¥ Î∞©ÏùÑ ÎßåÎì§Ïñ¥ ÏπúÍµ¨Îì§Í≥º Í≤åÏûÑÌïòÏÑ∏Ïöî.</p>
                  <button 
                    onClick={createRoom}
                    disabled={loading}
                    className="create-btn"
                  >
                    {loading ? 'ÏÉùÏÑ± Ï§ë...' : 'Î∞© ÎßåÎì§Í∏∞'}
                  </button>
                </div>

                <div className="join-room">
                  <h3>Î∞© Ï∞∏Ïó¨ÌïòÍ∏∞</h3>
                  <p>Î∞© ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï¥ÏÑú ÏπúÍµ¨Ïùò Î∞©Ïóê Ï∞∏Ïó¨ÌïòÏÑ∏Ïöî.</p>
                  <div className="join-form">
                    <input
                      type="text"
                      placeholder="Î∞© ÏΩîÎìú ÏûÖÎ†•"
                      value={roomCode}
                      onChange={(e) => setRoomCode(e.target.value.toUpperCase())}
                      maxLength={6}
                    />
                    <button 
                      onClick={joinRoom}
                      disabled={loading || !roomCode.trim()}
                      className="join-btn"
                    >
                      {loading ? 'Ï∞∏Ïó¨ Ï§ë...' : 'Ï∞∏Ïó¨ÌïòÍ∏∞'}
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        )}

        {activeTab === 'leaderboard' && (
          <div className="leaderboard-section">
            <h2>Îû≠ÌÇπ</h2>
            <div className="leaderboard-table">
              <table>
                <thead>
                  <tr>
                    <th>ÏàúÏúÑ</th>
                    <th>ÌîåÎ†àÏù¥Ïñ¥</th>
                    <th>Î†àÏù¥ÌåÖ</th>
                    <th>Í≤åÏûÑ Ïàò</th>
                    <th>ÏäπÎ•†</th>
                  </tr>
                </thead>
                <tbody>
                  {leaderboard.map((player) => (
                    <tr 
                      key={player.username}
                      className={userProfile?.username === player.username ? 'current-user' : ''}
                    >
                      <td className="rank">#{player.rank}</td>
                      <td className="username">{player.username}</td>
                      <td className="rating">{player.rating}</td>
                      <td>{player.gamesPlayed}</td>
                      <td>{player.winRate}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default MainMenu;
